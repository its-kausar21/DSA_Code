//time complexity- O(n)
// solved using “Dutch National Flag problem”
//Traverse over the array till mid <= hi, according to the value of arr[mid] we can have three cases:

//arr[mid] = 0, then swap arr[lo] and arr[mid] and increment lo by 1 because all the zeros are till index lo – 1 and move to the next element so increment mid by 1.
//arr[mid] = 1, then move to the next element so increment mid by 1.
//arr[mid] = 2, then swap arr[mid] and arr[hi] and decrement hi by 1 because all the twos are from index hi + 1 to N – 1. Now, we don’t move to the next element because the element which is now at index 
//mid can be a 0 and therefore needs to be checked again

class Solution
{
    public static void sort012(int a[], int n)
    {
        // code here 
        int lo=0, mid=0, temp=0;
        int hi=n-1;
        
        while(mid<=hi){
            switch(a[mid]){
                case 0:
                    temp=a[lo];
                    a[lo]=a[mid];
                    a[mid]=temp;
                    lo++;
                    mid++;
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    temp=a[mid];
                    a[mid]=a[hi];
                    a[hi]=temp;
                    hi--;
                    break;
            }
        }
    }
}
